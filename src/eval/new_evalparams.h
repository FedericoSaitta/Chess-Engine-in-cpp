
#pragma once


// these will be used once ill decide to improve upon eval function, one used by WEISS doesnt look bad at all
// note that WEISS is very strong about 3000... and still uses hand crafted eval so it is definetely possible :)
#define S(mg, eg) ((int)((unsigned int)(eg) << 16) + (mg))
#define MgScore(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define EgScore(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))


constexpr int KnightMobility = S(-6, -46);
constexpr int BishopMobility = S(40, 54);
constexpr int RookMobility = S(-13, 41);
constexpr int QueenMobility = S(19, 66);
constexpr int bishopPairBonus = S(7, 82);
constexpr int piece_value[] = {S(-37, 64), S(295, 529), S(143, 217), S(-111, 1167), S(129, 1902), S(-272, -1011)};

constexpr int pawn_table[64] {0, 0, 0, 0, 0, 0, 0, 0,
S(-167, 713), S(147, 515), S(59, 559), S(138, 307), S(202, 313), S(26, 431), S(104, 483), S(-219, 501),
S(-224, 500), S(-45, 402), S(286, 214), S(168, 26), S(78, 143), S(191, 233), S(-111, 341), S(-154, 318),
S(-43, 80), S(-22, 38), S(62, -66), S(88, -195), S(65, -139), S(70, -51), S(-88, -1), S(-146, 28),
S(-190, -9), S(-30, -79), S(-98, -139), S(35, -220), S(-27, -112), S(-163, -98), S(-157, -112), S(-402, -47),
S(-96, -57), S(-114, -101), S(-43, -132), S(-19, -143), S(22, -101), S(-197, -74), S(-50, -140), S(-125, -74),
S(-23, -142), S(125, -330), S(-79, -261), S(-29, -221), S(10, -211), S(-40, -155), S(57, -305), S(-25, -257),
0, 0, 0, 0, 0, 0, 0, 0
};
constexpr int knight_table[64] {S(605, 262), S(-110, 330), S(-19, 399), S(724, 257), S(181, 311), S(209, 274), S(-350, 283), S(1076, -113),
S(-401, 140), S(179, 129), S(653, 52), S(236, 325), S(575, 131), S(368, 176), S(185, 183), S(-76, 30),
S(-248, 241), S(13, 239), S(251, 352), S(433, 328), S(437, 333), S(596, 350), S(269, 177), S(-236, 306),
S(34, 194), S(-57, 90), S(49, 346), S(346, 202), S(93, 24), S(260, 391), S(-160, 29), S(61, 196),
S(-290, -119), S(-13, 318), S(-47, 200), S(36, 76), S(218, 124), S(-3, 149), S(151, 225), S(-301, -118),
S(-295, -270), S(-215, -53), S(60, -492), S(-96, 263), S(-44, 202), S(38, -451), S(-27, -132), S(-291, -204),
S(-156, -155), S(-152, 78), S(-192, 52), S(-60, -349), S(-91, -259), S(-126, 101), S(-40, -111), S(345, -509),
S(-579, -460), S(-160, -673), S(-633, -93), S(-736, -80), S(-482, -171), S(-602, -141), S(-233, -704), S(-725, 5)
};
constexpr int bishop_table[64]  {S(976, 239), S(49, 314), S(-70, 461), S(679, 237), S(20, 348), S(68, 290), S(244, 145), S(1181, 292),
S(-130, 221), S(174, 113), S(84, 161), S(58, 199), S(180, 220), S(165, 217), S(392, 76), S(-13, 70),
S(-170, 310), S(-64, 233), S(307, 93), S(-42, 157), S(-48, 269), S(154, 299), S(-55, 289), S(211, 88),
S(136, 185), S(-306, -8), S(-74, 210), S(66, 174), S(10, 70), S(-88, 172), S(-290, -141), S(-96, 227),
S(-296, 272), S(96, 63), S(-204, -86), S(-82, 102), S(75, 52), S(-183, -301), S(-6, 66), S(-310, 138),
S(-43, -1), S(-161, 124), S(-146, 24), S(-146, -231), S(-160, -220), S(-129, -93), S(-174, -205), S(70, -74),
S(-248, 219), S(89, -451), S(-212, -91), S(-213, -269), S(-91, -366), S(-123, 56), S(54, -487), S(-71, -109),
S(-347, -14), S(-322, 149), S(25, -544), S(-513, 54), S(-355, 94), S(-217, -495), S(-334, 67), S(-475, 2)
};
constexpr int rook_table[64]  {S(88, 552), S(-124, 533), S(-78, 570), S(-137, 585), S(122, 526), S(-200, 554), S(-40, 440), S(-85, 505),
S(-173, 483), S(-164, 482), S(-171, 495), S(-148, 509), S(-118, 465), S(-47, 581), S(-134, 644), S(-147, 540),
S(-198, 507), S(-192, 506), S(-105, 506), S(-162, 481), S(-155, 471), S(-109, 627), S(-317, 717), S(-121, 540),
S(-263, 487), S(-355, 457), S(-203, 423), S(-138, 381), S(-185, 427), S(-105, 513), S(-201, 563), S(-8, 505),
S(-226, 286), S(-249, 430), S(-387, 384), S(-326, 288), S(-259, 316), S(-298, 248), S(-237, 427), S(-280, 375),
S(-371, 182), S(-414, 232), S(-279, 189), S(-321, 168), S(-379, 134), S(-225, 50), S(-174, 150), S(-229, 148),
S(-278, 52), S(-138, 154), S(-398, 228), S(-358, 85), S(-352, 50), S(-10, -149), S(-245, 162), S(-355, 119),
S(-49, -888), S(-193, -402), S(-120, -465), S(-226, -481), S(-72, -525), S(-42, -929), S(-442, -243), S(-104, -912)
};
constexpr int queen_table[64]  {S(705, 635), S(-337, 1067), S(-261, 984), S(-231, 1098), S(-308, 1101), S(-501, 1114), S(-289, 1098), S(326, 923),
S(-79, 327), S(25, -75), S(94, 285), S(-18, 395), S(-174, 561), S(188, 723), S(443, 282), S(482, 314),
S(-209, 290), S(-143, 319), S(285, -16), S(126, 69), S(151, 263), S(-17, 526), S(8, 501), S(102, 323),
S(19, 141), S(-303, 155), S(-47, -20), S(87, -127), S(27, 20), S(9, 229), S(-414, 538), S(-31, 108),
S(-202, -295), S(174, -305), S(-250, -151), S(-122, -374), S(77, -291), S(-363, 8), S(260, -330), S(-337, 369),
S(-417, 115), S(-30, -623), S(-260, -207), S(-161, -552), S(-218, -323), S(-78, -516), S(-116, -281), S(-325, 266),
S(-257, -56), S(-95, -215), S(0, -692), S(-118, -543), S(-26, -658), S(-160, -280), S(-200, -220), S(-320, 137),
S(-572, -55), S(-394, -121), S(-238, -399), S(111, -1061), S(-304, -298), S(-988, -56), S(-633, 230), S(-467, 263),
};
constexpr int king_table[64] {S(229, -206), S(227, -266), S(99, -94), S(319, -187), S(318, -151), S(87, -95), S(129, -93), S(201, -130),
S(129, -241), S(-55, -63), S(68, -56), S(45, -85), S(33, -25), S(15, 67), S(-120, 99), S(-44, -1),
S(177, -252), S(-99, -22), S(-63, -70), S(-41, -4), S(-43, 17), S(-129, 123), S(-130, 161), S(7, -28),
S(211, -358), S(52, -203), S(-193, -37), S(-106, -49), S(-141, -18), S(-89, 48), S(-32, -25), S(-78, -66),
S(223, -485), S(64, -249), S(-83, -155), S(-113, -83), S(-151, -77), S(-153, -99), S(-103, -183), S(37, -238),
S(140, -551), S(-157, -340), S(-154, -224), S(-210, -127), S(-287, -157), S(-300, -181), S(-263, -266), S(-92, -359),
S(-6, -467), S(-79, -392), S(-167, -286), S(-427, -172), S(-456, -241), S(-259, -240), S(-331, -291), S(-67, -375),
S(14, -569), S(9, -554), S(-7, -480), S(-358, -352), S(-60, -558), S(-507, -412), S(-136, -648), S(-144, -527),
};
constexpr int doublePawnPenalty = 0;
constexpr int isolatedPawnPenalty = S(-8, 168);
constexpr int passedPawnBonus[] = {S(-51, 450), S(-94, 614), S(-55, 683), S(-10, 721), S(-58, 698), S(200, 200), S(17, 43), S(-10, -139)};
constexpr int semiOpenFileScore = S(90, -51);
constexpr int openFileScore = S(94, 49);
constexpr int kingShieldBonus = S(83, 117);


inline const int* pesto_table[6] =
{
    pawn_table,
    knight_table,
    bishop_table,
    rook_table,
    queen_table,
    king_table
};

constexpr int gamephaseInc[12] = {0, 1, 1, 2, 4, 0, 0, 1, 1, 2, 4, 0,};
