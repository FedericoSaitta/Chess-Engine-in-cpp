//
// Created by Federico Saitta on 18/07/2024.
//
#pragma once

// these will be used once ill decide to improve upon eval function, one used by WEISS doesnt look bad at all
// note that WEISS is very strong about 3000... and still uses hand crafted eval so it is definetely possible :)
#define S(mg, eg) ((int)((unsigned int)(eg) << 16) + (mg))
#define MgScore(s) ((int16_t)((uint16_t)((unsigned)((s)))))
#define EgScore(s) ((int16_t)((uint16_t)((unsigned)((s) + 0x8000) >> 16)))

// [752s] Epoch 700 (1.4212 eps), error 0.11342, LR 1
constexpr int KnightMobility = S(-2, 2);
constexpr int BishopMobility = S(5, 10);
constexpr int RookMobility = S(3, 3);
constexpr int QueenMobility = S(2, 5);
constexpr int bishopPairBonus = S(19, 77);
constexpr int piece_value[] = {S(71, 109), S(356, 396), S(343, 362), S(471, 698), S(1101, 1286), 0};
constexpr int pawn_table[] = {0, 0, 0, 0, 0, 0, 0, 0,
S(99, 168), S(84, 165), S(101, 136), S(115, 97), S(108, 91), S(80, 114), S(-72, 170), S(-67, 174),
S(1, 79), S(21, 64), S(42, 35), S(36, -1), S(52, -6), S(100, 15), S(39, 37), S(15, 43),
S(1, 46), S(4, 38), S(5, 26), S(22, 1), S(32, 9), S(38, 13), S(12, 29), S(0, 26),
S(-8, 28), S(-9, 26), S(-2, 9), S(5, 6), S(13, 8), S(14, 12), S(2, 17), S(-7, 13),
S(-13, 19), S(-21, 17), S(-12, 15), S(-9, 13), S(-3, 22), S(3, 18), S(1, 11), S(-3, 3),
S(-15, 26), S(-15, 20), S(-19, 25), S(-13, 21), S(-16, 33), S(18, 26), S(16, 14), S(-6, -4),
0, 0, 0, 0, 0, 0, 0, 0,
};
constexpr int knight_table[] = {S(-211, -38), S(-90, 5), S(-106, 50), S(-22, 25), S(47, 14), S(-121, 45), S(-55, 4), S(-142, -87),
S(-22, -13), S(-19, 18), S(29, 28), S(54, 55), S(72, 40), S(86, 2), S(-12, 10), S(10, -16),
S(-32, 8), S(23, 39), S(51, 61), S(65, 60), S(103, 45), S(123, 54), S(62, 38), S(44, -1),
S(7, 13), S(25, 50), S(43, 67), S(55, 83), S(39, 84), S(64, 73), S(35, 64), S(41, 21),
S(-5, 11), S(9, 47), S(30, 67), S(29, 73), S(37, 72), S(28, 70), S(42, 47), S(7, 21),
S(-18, -22), S(6, 24), S(18, 31), S(27, 54), S(34, 49), S(24, 29), S(17, 23), S(-7, -23),
S(-38, -5), S(-22, 13), S(-2, 11), S(11, 24), S(7, 27), S(4, 8), S(-14, 8), S(-10, -7),
S(-105, -50), S(-18, -41), S(-44, 3), S(-18, 8), S(-9, 5), S(-9, -4), S(-16, -31), S(-101, -33),
};
constexpr int bishop_table[] = {S(-22, 38), S(-61, 50), S(-99, 51), S(-77, 56), S(-69, 47), S(-76, 51), S(7, 33), S(-23, 40),
S(-50, 37), S(-9, 32), S(-13, 30), S(-21, 34), S(-5, 31), S(17, 27), S(-12, 28), S(-8, 23),
S(-7, 31), S(3, 36), S(32, 16), S(20, 20), S(47, 15), S(53, 27), S(46, 33), S(24, 34),
S(-15, 32), S(14, 30), S(9, 20), S(43, 14), S(19, 22), S(24, 17), S(16, 36), S(7, 34),
S(-3, 20), S(6, 22), S(4, 25), S(16, 17), S(24, 9), S(-3, 21), S(5, 19), S(12, 15),
S(3, 16), S(10, 21), S(4, 18), S(6, 19), S(3, 19), S(10, 9), S(9, 9), S(18, 17),
S(14, 7), S(15, 2), S(13, 5), S(0, 9), S(2, 8), S(3, -2), S(28, 5), S(11, -23),
S(17, 0), S(14, 15), S(0, -2), S(-12, 12), S(-17, 17), S(-8, 12), S(-1, 13), S(8, 10),
};
constexpr int rook_table[] = {S(46, 59), S(45, 63), S(26, 69), S(47, 60), S(54, 61), S(102, 55), S(97, 55), S(89, 58),
S(3, 69), S(-10, 78), S(21, 71), S(46, 69), S(39, 72), S(87, 43), S(40, 54), S(62, 47),
S(-18, 65), S(16, 55), S(10, 63), S(32, 51), S(54, 42), S(83, 46), S(118, 24), S(43, 47),
S(-21, 55), S(-9, 56), S(-2, 58), S(20, 50), S(2, 54), S(23, 50), S(33, 41), S(18, 45),
S(-32, 41), S(-37, 55), S(-33, 56), S(-23, 49), S(-25, 47), S(-14, 48), S(2, 43), S(-6, 36),
S(-36, 24), S(-30, 34), S(-36, 34), S(-26, 29), S(-25, 30), S(-16, 28), S(13, 20), S(-15, 17),
S(-52, 25), S(-28, 18), S(-26, 25), S(-24, 21), S(-21, 19), S(-6, 12), S(-4, 11), S(-59, 31),
S(-15, 26), S(-14, 27), S(-10, 30), S(-2, 21), S(-2, 22), S(-4, 32), S(4, 20), S(-5, 5),
};
constexpr int queen_table[] = {S(-26, 79), S(-11, 82), S(-10, 99), S(21, 85), S(31, 99), S(91, 82), S(94, 70), S(56, 93),
S(-33, 64), S(-67, 94), S(-31, 82), S(-54, 129), S(-30, 150), S(35, 134), S(-34, 146), S(32, 106),
S(-29, 33), S(-23, 39), S(-36, 67), S(-14, 73), S(10, 113), S(51, 124), S(71, 103), S(40, 132),
S(-16, 13), S(-19, 42), S(-24, 39), S(-25, 74), S(-26, 109), S(-5, 126), S(12, 119), S(22, 105),
S(-12, 8), S(-11, 29), S(-14, 24), S(-20, 62), S(-18, 56), S(-3, 65), S(6, 51), S(11, 72),
S(-12, -7), S(-1, 0), S(-3, 14), S(-7, 1), S(-8, 5), S(-4, 23), S(10, 3), S(8, 3),
S(-8, -21), S(0, -19), S(7, -39), S(2, -15), S(4, -25), S(12, -69), S(19, -80), S(10, -49),
S(3, -30), S(0, -40), S(7, -53), S(12, -31), S(8, -46), S(-23, -30), S(-10, -58), S(-6, -48),
};
constexpr int king_table[] = {S(106, -151), S(124, -63), S(161, -59), S(89, -29), S(116, -39), S(100, -29), S(105, -32), S(63, -115),
S(0, -36), S(47, 26), S(135, 3), S(84, 5), S(53, 13), S(88, 19), S(14, 42), S(-33, -21),
S(-11, 5), S(83, 35), S(89, 32), S(54, 29), S(63, 24), S(98, 37), S(66, 43), S(-41, 7),
S(-38, 6), S(41, 27), S(33, 44), S(3, 49), S(-11, 49), S(23, 41), S(0, 37), S(-69, 9),
S(-16, -24), S(4, 16), S(22, 34), S(-49, 57), S(-31, 51), S(-34, 36), S(-23, 20), S(-82, -3),
S(-45, -14), S(-51, 14), S(-57, 28), S(-74, 46), S(-65, 40), S(-71, 28), S(-48, 7), S(-56, -10),
S(-5, -14), S(-36, 1), S(-62, 18), S(-120, 33), S(-92, 24), S(-86, 20), S(-28, -6), S(-4, -33),
S(-33, -54), S(7, -37), S(-31, -18), S(-108, -7), S(-45, -47), S(-111, -3), S(-4, -38), S(5, -91),
};
constexpr int doublePawnPenalty = S(-1, -6);
constexpr int isolatedPawnPenalty = S(-5, -10);
constexpr int phalanxPawnBonus = S(9, 5);
constexpr int protectedPawnBonus = S(19, 10);
constexpr int passedPawnBonus[] = {0, S(-1, 17), S(-6, 21), S(-3, 45), S(21, 65), S(36, 128), S(67, 68), S(200, 200)};
constexpr int semiOpenFileScore = S(15, 16);
constexpr int openFileScore = S(20, -7);
constexpr int kingSemiOpenFileScore = S(-28, 22);
constexpr int kingOpenFileScore = S(-20, -31);
constexpr int kingShieldBonus = S(6, 1);

inline const int* pesto_table[6] =
{
    pawn_table,
    knight_table,
    bishop_table,
    rook_table,
    queen_table,
    king_table
};

constexpr int gamephaseInc[12] = {0, 1, 1, 2, 4, 0, 0, 1, 1, 2, 4, 0,};

